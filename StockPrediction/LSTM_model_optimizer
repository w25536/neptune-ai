import pandas as pd
import matplotlib.pyplot as plt
import neptune
import numpy as np
from train_test_split import train_test_split
from data_processing import calculate_rmse, calculate_mape, calculate_perf_metrics,train_and_evaluate_lstm
from visualization import plot_stock_trend, plot_stock_trend_lstm


df = pd.read_csv('./Datasets/TSLA.csv')

df.columns = df.columns.str.strip()

stockprices = df[["Date", "Low", "High", "Close", "Open"]]

test_ratio = 0.3

train, test, train_size, test_size = train_test_split(stockprices, test_ratio)

window_size = 50

# Define the hyperparameters to tune
hyperparameters = {
    'epochs': [10, 15, 9],
    'batch_size': [1, 2, 3, 4]
}

best_rmse = float('inf')
best_mape = float('inf')
best_params = {}

# Initialize a Neptune run
run = neptune.init_run(
    project="w25536/StockPrediction",
    name="LSTM_Optimizer",
    description="stock-prediction-machine-learning",
    tags=["stockprediction", "LSTM", "neptune", "Hyperparameter"],
    api_token="eyJhcGlfYWRkcmVzcyI6Imh0dHBzOi8vYXBwLm5lcHR1bmUuYWkiLCJhcGlfdXJsIjoiaHR0cHM6Ly9hcHAubmVwdHVuZS5haSIsImFwaV9rZXkiOiI2ZGUxZWY5Yi01YTdjLTQ5YjEtYjQ5YS02OGYyMjA1NDMyMzkifQ==", # your credentials

)


# Perform hyperparameter tuning
for epochs in hyperparameters['epochs']:
    for batch_size in hyperparameters['batch_size']:
        # Train and evaluate the LSTM model
        rmse_lstm, mape_lstm = train_and_evaluate_lstm(
            stockprices=df,
            train_size=train_size,
            window_size=window_size,
            cur_epochs=epochs,
            cur_batch_size=batch_size,
            test=test,
            run=run
        )

        # Update best parameters if the current model is better
        if rmse_lstm < best_rmse:
            best_rmse = rmse_lstm
            best_mape = mape_lstm
            best_params = {'epochs': epochs, 'batch_size': batch_size}

# Print the best parameters and evaluation metrics
print(f"Best Parameters: {best_params}")
print(f"Best RMSE: {best_rmse}")
print(f"Best MAPE: {best_mape}")

plot_stock_trend_lstm(train=train, test=test, run_instance=run, neptune_instance=neptune)

# Stop the Neptune run
run.stop()